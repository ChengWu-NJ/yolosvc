// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: yolosvc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObjDetectClient is the client API for ObjDetect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjDetectClient interface {
	DetectOneJpg(ctx context.Context, in *JpgBytes, opts ...grpc.CallOption) (*JpgBytes, error)
	DetectJpgStream(ctx context.Context, opts ...grpc.CallOption) (ObjDetect_DetectJpgStreamClient, error)
	Healthz(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthzResponse, error)
}

type objDetectClient struct {
	cc grpc.ClientConnInterface
}

func NewObjDetectClient(cc grpc.ClientConnInterface) ObjDetectClient {
	return &objDetectClient{cc}
}

func (c *objDetectClient) DetectOneJpg(ctx context.Context, in *JpgBytes, opts ...grpc.CallOption) (*JpgBytes, error) {
	out := new(JpgBytes)
	err := c.cc.Invoke(ctx, "/chengwu.yolosvc.v1.ObjDetect/DetectOneJpg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objDetectClient) DetectJpgStream(ctx context.Context, opts ...grpc.CallOption) (ObjDetect_DetectJpgStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjDetect_ServiceDesc.Streams[0], "/chengwu.yolosvc.v1.ObjDetect/DetectJpgStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &objDetectDetectJpgStreamClient{stream}
	return x, nil
}

type ObjDetect_DetectJpgStreamClient interface {
	Send(*JpgBytes) error
	Recv() (*JpgBytes, error)
	grpc.ClientStream
}

type objDetectDetectJpgStreamClient struct {
	grpc.ClientStream
}

func (x *objDetectDetectJpgStreamClient) Send(m *JpgBytes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *objDetectDetectJpgStreamClient) Recv() (*JpgBytes, error) {
	m := new(JpgBytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objDetectClient) Healthz(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, "/chengwu.yolosvc.v1.ObjDetect/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjDetectServer is the server API for ObjDetect service.
// All implementations must embed UnimplementedObjDetectServer
// for forward compatibility
type ObjDetectServer interface {
	DetectOneJpg(context.Context, *JpgBytes) (*JpgBytes, error)
	DetectJpgStream(ObjDetect_DetectJpgStreamServer) error
	Healthz(context.Context, *emptypb.Empty) (*HealthzResponse, error)
	mustEmbedUnimplementedObjDetectServer()
}

// UnimplementedObjDetectServer must be embedded to have forward compatible implementations.
type UnimplementedObjDetectServer struct {
}

func (UnimplementedObjDetectServer) DetectOneJpg(context.Context, *JpgBytes) (*JpgBytes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectOneJpg not implemented")
}
func (UnimplementedObjDetectServer) DetectJpgStream(ObjDetect_DetectJpgStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DetectJpgStream not implemented")
}
func (UnimplementedObjDetectServer) Healthz(context.Context, *emptypb.Empty) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedObjDetectServer) mustEmbedUnimplementedObjDetectServer() {}

// UnsafeObjDetectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjDetectServer will
// result in compilation errors.
type UnsafeObjDetectServer interface {
	mustEmbedUnimplementedObjDetectServer()
}

func RegisterObjDetectServer(s grpc.ServiceRegistrar, srv ObjDetectServer) {
	s.RegisterService(&ObjDetect_ServiceDesc, srv)
}

func _ObjDetect_DetectOneJpg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JpgBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjDetectServer).DetectOneJpg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chengwu.yolosvc.v1.ObjDetect/DetectOneJpg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjDetectServer).DetectOneJpg(ctx, req.(*JpgBytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjDetect_DetectJpgStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjDetectServer).DetectJpgStream(&objDetectDetectJpgStreamServer{stream})
}

type ObjDetect_DetectJpgStreamServer interface {
	Send(*JpgBytes) error
	Recv() (*JpgBytes, error)
	grpc.ServerStream
}

type objDetectDetectJpgStreamServer struct {
	grpc.ServerStream
}

func (x *objDetectDetectJpgStreamServer) Send(m *JpgBytes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *objDetectDetectJpgStreamServer) Recv() (*JpgBytes, error) {
	m := new(JpgBytes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ObjDetect_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjDetectServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chengwu.yolosvc.v1.ObjDetect/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjDetectServer).Healthz(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjDetect_ServiceDesc is the grpc.ServiceDesc for ObjDetect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjDetect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chengwu.yolosvc.v1.ObjDetect",
	HandlerType: (*ObjDetectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetectOneJpg",
			Handler:    _ObjDetect_DetectOneJpg_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _ObjDetect_Healthz_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DetectJpgStream",
			Handler:       _ObjDetect_DetectJpgStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "yolosvc.proto",
}
